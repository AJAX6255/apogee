Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: EQWIDTBPLATT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (EQWIDTBPLATT) [1] ../source-v15.1/eqwidtbplatt.f(1,18)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../source-v15.1/eqwidtbplatt.f(58,12)
<Peeled loop for vectorization>
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidtbplatt.f(58,12)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidtbplatt.f(58,12)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidtbplatt.f(93,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../source-v15.1/eqwidtbplatt.f(95,12)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../source-v15.1/eqwidtbplatt.f(95,12)
         remark #15300: LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../source-v15.1/eqwidtbplatt.f(95,12)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidtbplatt.f(148,16)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidtbplatt.f(155,16)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidtbplatt.f(155,16)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidtbplatt.f(155,16)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidtbplatt.f(109,16)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidtbplatt.f(118,16)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidtbplatt.f(118,16)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidtbplatt.f(118,16)
<Remainder loop for vectorization>
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../source-v15.1/eqwidtbplatt.f(106,12)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ ../source-v15.1/eqwidtbplatt.f(141,16) ]

   LOOP BEGIN at ../source-v15.1/eqwidtbplatt.f(141,16)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

../source-v15.1/eqwidtbplatt.f(96,11):remark #34026: call to memcpy implemented as a call to optimized library version
../source-v15.1/eqwidtbplatt.f(1,18):remark #34051: REGISTER ALLOCATION : [eqwidtbplatt_] ../source-v15.1/eqwidtbplatt.f:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     432
            Global    :     104
            Local     :     328
        Regenerable   :     231
        Spilled       :      16
        
    Routine stack
        Variables     :     376 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      47 [1.56e+07 ~ 0.6%]
        Spills        :      88 bytes*
            Reads     :      20 [6.46e+07 ~ 2.6%]
            Writes    :      21 [5.71e+06 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
