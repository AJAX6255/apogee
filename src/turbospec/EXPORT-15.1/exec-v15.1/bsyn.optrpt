Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: BSYN

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (BSYN) [1] ../source-v15.1/bsyn.f(1,15)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../source-v15.1/bsyn.f(189,7)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/bsyn.f(191,7) ]
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(223,7)
   remark #15527: loop was not vectorized: function call to memcpy cannot be vectorized   [ ../source-v15.1/bsyn.f(224,9) ]
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(263,7)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(272,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:for_f90_index (273:31) and call:for_write_seq_lis (273:11)
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(280,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (281:35) and at (281:35)
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(385,7)
   remark #15326: loop was not vectorized: implied FP exception model prevents vectorization. Consider changing compiler flags and/or directives in the source to enable fast FP model and to mask FP exceptions   [ ../source-v15.1/bsyn.f(386,21) ]
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(394,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (396:11) and at (406:11)
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(416,7)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(416,7)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(490,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../source-v15.1/bsyn.f(493,11)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/bsyn.f(493,11) ]
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../source-v15.1/bsyn.f(493,11)
   <Peeled loop for vectorization>
      remark #25436: completely unrolled by 3  
   LOOP END

   LOOP BEGIN at ../source-v15.1/bsyn.f(493,11)
   <Remainder loop for vectorization>
      remark #25436: completely unrolled by 1  
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(564,7)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../source-v15.1/bsyn.f(549,16) ]
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(569,10)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between XLMB (570:9) and XLMB (576:20)

   LOOP BEGIN at ../source-v15.1/bsyn.f(575,12)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(588,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../source-v15.1/bsyn.f(589,11)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/bsyn.f(591,11) ]
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../source-v15.1/bsyn.f(589,11)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at ../source-v15.1/bsyn.f(589,11)
   <Peeled loop for vectorization>
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(595,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../source-v15.1/bsyn.f(596,11)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/bsyn.f(599,11) ]
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../source-v15.1/bsyn.f(596,11)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at ../source-v15.1/bsyn.f(596,11)
   <Peeled loop for vectorization>
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(615,10)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/bsyn.f(615,10) ]
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(615,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(631,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(691,11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (694:15) and at (694:15)
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(697,11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (700:15) and at (700:15)
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(703,11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (706:15) and at (706:15)
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(709,11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (712:15) and at (712:15)
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(768,9)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ../source-v15.1/bsyn.f(771,11) ]
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(768,9)
<Remainder>
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(900,11)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/bsyn.f(903,11) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 3
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(900,11)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(921,11)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(953,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (973:15) and at (975:15)

   LOOP BEGIN at ../source-v15.1/bsyn.f(969,11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between blk(K) (970:13) and blk(K) (972:24)
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(1105,10)
<Distributed chunk1>
   remark #25426: Loop Distributed (2 way) 
   remark #15301: PARTIAL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(1105,10)
<Remainder loop for vectorization, Distributed chunk1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(1105,10)
<Remainder loop for vectorization, Distributed chunk1>
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(1105,10)
<Distributed chunk2>
   remark #15301: PARTIAL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(1105,10)
<Remainder loop for vectorization, Distributed chunk2>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(1116,8)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/bsyn.f(1118,8) ]
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(1116,8)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(1119,11)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../source-v15.1/bsyn.f(1135,19) ]

   LOOP BEGIN at ../source-v15.1/bsyn.f(1121,13)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between V (1124:12) and V (1126:19)
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(1145,7)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/bsyn.f(1147,7) ]
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(1145,7)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(1152,11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between V (1155:9) and V (1157:16)
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(1205,10)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between V (1209:9) and V (1211:16)

   LOOP BEGIN at ../source-v15.1/bsyn.f(1206,11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between V (1209:9) and V (1211:16)
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(1173,10)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../source-v15.1/bsyn.f(1191,17) ]

   LOOP BEGIN at ../source-v15.1/bsyn.f(1175,11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between V (1178:9) and V (1180:16)
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(719,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(719,11)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(1296,9)
<Predicate Optimized v1>
   remark #25423: Condition at line 1297 hoisted out of this loop
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(1296,9)
<Remainder loop for vectorization, Predicate Optimized v1>
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(1296,9)
<Peeled loop for vectorization, Predicate Optimized v2>
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(1296,9)
<Predicate Optimized v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(1296,9)
<Remainder loop for vectorization, Predicate Optimized v2>
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(1320,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between FILPRINT (1321:11) and FILPRINT(0) (1322:11)
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(1324,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (1324:9) and at (1324:9)
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(1324,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (1324:9) and at (1324:9)
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(1329,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:for_write_seq_xmit (1329:9) and call:for_write_seq_xmit (1329:9)

   LOOP BEGIN at ../source-v15.1/bsyn.f(1329,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between at (1329:9) and at (1329:9)
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(1330,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:for_write_seq_xmit (1330:9) and call:for_write_seq_xmit (1330:9)

   LOOP BEGIN at ../source-v15.1/bsyn.f(1330,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between at (1330:9) and at (1330:9)
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/bsyn.f(1332,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:for_write_seq_xmit (1332:9) and call:for_write_seq_xmit (1332:9)

   LOOP BEGIN at ../source-v15.1/bsyn.f(1332,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between at (1332:9) and at (1332:9)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../source-v15.1/bsyn.f(669,10)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ ../source-v15.1/bsyn.f(826,9) ]

   LOOP BEGIN at ../source-v15.1/bsyn.f(826,9)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification

      LOOP BEGIN at ../source-v15.1/bsyn.f(1064,13)
         remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ ../source-v15.1/bsyn.f(1149,10) ]

         LOOP BEGIN at ../source-v15.1/bsyn.f(1149,10)
            remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
         LOOP END
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

../source-v15.1/bsyn.f(220,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 8), and destination (alignment, offset): (32, 0)
../source-v15.1/bsyn.f(221,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 8), and destination (alignment, offset): (32, 0)
../source-v15.1/bsyn.f(224,9):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
../source-v15.1/bsyn.f(241,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
../source-v15.1/bsyn.f(242,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
../source-v15.1/bsyn.f(243,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
../source-v15.1/bsyn.f(244,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
../source-v15.1/bsyn.f(245,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
../source-v15.1/bsyn.f(246,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
../source-v15.1/bsyn.f(247,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
../source-v15.1/bsyn.f(250,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 20), and destination (alignment, offset): (32, 8)
../source-v15.1/bsyn.f(671,9):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
../source-v15.1/bsyn.f(1321,11):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
../source-v15.1/bsyn.f(1,15):remark #34051: REGISTER ALLOCATION : [MAIN__] ../source-v15.1/bsyn.f:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :    2842
            Global    :     453
            Local     :    2389
        Regenerable   :    1873
        Spilled       :      74
        
    Routine stack
        Variables     :    3116 bytes*
            Reads     :       2 [2.00e+00 ~ 0.0%]
            Writes    :     501 [2.31e+08 ~ 0.7%]
        Spills        :     552 bytes*
            Reads     :     148 [4.38e+09 ~ 12.4%]
            Writes    :     127 [4.89e+07 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
