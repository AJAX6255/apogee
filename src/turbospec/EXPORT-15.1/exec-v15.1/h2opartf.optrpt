Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: H2OPARTF

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (H2OPARTF) [1] ../source-v15.1/h2opartf.f(8,19)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../source-v15.1/h2opartf.f(28,10)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/h2opartf.f(28,10)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ../source-v15.1/h2opartf.f(35,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../source-v15.1/h2opartf.f(45,10)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../source-v15.1/h2opartf.f(45,10)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../source-v15.1/h2opartf.f(45,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/h2opartf.f(52,10)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (58:7) and at (58:7)
LOOP END

LOOP BEGIN at ../source-v15.1/h2opartf.f(66,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between b0%be_field (66:7) and b0 (66:7)
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ../source-v15.1/h2opartf.f(80,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../source-v15.1/h2opartf.f(81,10)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../source-v15.1/h2opartf.f(82,10)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../source-v15.1/h2opartf.f(92,10)
            remark #15300: LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at ../source-v15.1/h2opartf.f(92,10)
         <Remainder loop for vectorization>
            remark #15301: REMAINDER LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at ../source-v15.1/h2opartf.f(92,10)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/h2opartf.f(100,10)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (103:7) and at (103:7)
LOOP END

    Report from: Code generation optimizations [cg]

../source-v15.1/h2opartf.f(8,19):remark #34051: REGISTER ALLOCATION : [h2opartf_] ../source-v15.1/h2opartf.f:8

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     746
            Global    :     203
            Local     :     543
        Regenerable   :     348
        Spilled       :      78
        
    Routine stack
        Variables     :     664 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      97 [1.45e+02 ~ 0.2%]
        Spills        :     664 bytes*
            Reads     :     161 [1.36e+04 ~ 19.5%]
            Writes    :     128 [1.04e+04 ~ 15.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
