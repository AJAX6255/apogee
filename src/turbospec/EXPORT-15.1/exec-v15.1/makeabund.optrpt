Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: MAKEABUND

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MAKEABUND) [1] ../source-v15.1/makeabund.f(6,18)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../source-v15.1/makeabund.f(206,9)
   remark #25399: memcopy generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at ../source-v15.1/makeabund.f(215,7)
   remark #15527: loop was not vectorized: function call to memcpy cannot be vectorized   [ ../source-v15.1/makeabund.f(216,9) ]
LOOP END

LOOP BEGIN at ../source-v15.1/makeabund.f(225,7)
   remark #15326: loop was not vectorized: implied FP exception model prevents vectorization. Consider changing compiler flags and/or directives in the source to enable fast FP model and to mask FP exceptions   [ ../source-v15.1/makeabund.f(226,25) ]
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at ../source-v15.1/makeabund.f(235,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between ABUND(IELALPHA(IALPHA)) (236:11) and ABUND(IELALPHA(IALPHA)) (236:11)
   remark #25436: completely unrolled by 8  
LOOP END

LOOP BEGIN at ../source-v15.1/makeabund.f(248,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:powf (251:23) and call:log10f (254:24)
LOOP END

LOOP BEGIN at ../source-v15.1/makeabund.f(260,7)
   remark #15300: LOOP WAS VECTORIZED
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at ../source-v15.1/makeabund.f(270,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/makeabund.f(270,9)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/makeabund.f(270,9)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/makeabund.f(276,7)
   remark #25420: Collapsed with loop at line 277 
   remark #25408: memset generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at ../source-v15.1/makeabund.f(277,9)
      remark #25421: Loop eliminated in Collapsing 

   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/makeabund.f(281,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/makeabund.f(281,7)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/makeabund.f(281,7)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/makeabund.f(575,7)
   remark #15301: OUTER LOOP WAS VECTORIZED

   LOOP BEGIN at ../source-v15.1/makeabund.f(578,9)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ../source-v15.1/makeabund.f(579,11) ]
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

../source-v15.1/makeabund.f(207,11):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
../source-v15.1/makeabund.f(216,9):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (2, 0), and destination (alignment, offset): (1, 0)
../source-v15.1/makeabund.f(278,11):remark #34026: call to memset implemented as a call to optimized library version
../source-v15.1/makeabund.f(6,18):remark #34051: REGISTER ALLOCATION : [makeabund_] ../source-v15.1/makeabund.f:6

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15 zmm0-zmm8]
        
    Routine temporaries
        Total         :     243
            Global    :      74
            Local     :     169
        Regenerable   :      82
        Spilled       :       8
        
    Routine stack
        Variables     :     160 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      14 [2.17e+01 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       7 [5.95e+01 ~ 0.0%]
            Writes    :       5 [5.53e+01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
