Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: PARTFAMESH2O

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (PARTFAMESH2O) [1] ../source-v15.1/partfamesh2o.f(3,18)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../source-v15.1/partfamesh2o.f(41,10)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/partfamesh2o.f(51,10)
   remark #25408: memset generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at ../source-v15.1/partfamesh2o.f(91,10)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (92:8) and at (92:8)
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 4
LOOP END

LOOP BEGIN at ../source-v15.1/partfamesh2o.f(132,10)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/partfamesh2o.f(132,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/partfamesh2o.f(136,10)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between at (145:8) and at (145:8)
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1

   LOOP BEGIN at ../source-v15.1/partfamesh2o.f(145,8)
      remark #25436: completely unrolled by 2   (pre-vector) 
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../source-v15.1/partfamesh2o.f(109,10)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ ../source-v15.1/partfamesh2o.f(109,10) ]

   LOOP BEGIN at ../source-v15.1/partfamesh2o.f(109,10)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

../source-v15.1/partfamesh2o.f(52,8):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
../source-v15.1/partfamesh2o.f(3,18):remark #34051: REGISTER ALLOCATION : [partfamesh2o_] ../source-v15.1/partfamesh2o.f:3

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     425
            Global    :      94
            Local     :     331
        Regenerable   :     300
        Spilled       :      23
        
    Routine stack
        Variables     :     544 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      78 [6.31e+02 ~ 0.0%]
        Spills        :     144 bytes*
            Reads     :      37 [5.85e+02 ~ 0.0%]
            Writes    :      29 [2.33e+02 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
