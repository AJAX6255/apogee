Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: TAKEMOLEC

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (TAKEMOLEC) [1] ../source-v15.1/takemolec.f(1,18)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../source-v15.1/takemolec.f(108,9)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ../source-v15.1/takemolec.f(123,9)
   remark #25420: Collapsed with loop at line 124 
   remark #15300: LOOP WAS VECTORIZED

   LOOP BEGIN at ../source-v15.1/takemolec.f(124,11)
      remark #25421: Loop eliminated in Collapsing 

   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/takemolec.f(132,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../source-v15.1/takemolec.f(134,11)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/takemolec.f(157,28)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ ../source-v15.1/takemolec.f(149,13) ]

   LOOP BEGIN at ../source-v15.1/takemolec.f(149,13)
      remark #15523: loop was not vectorized: loop control variable J was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/takemolec.f(170,9)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25436: completely unrolled by 12  
LOOP END

LOOP BEGIN at ../source-v15.1/takemolec.f(170,9)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25436: completely unrolled by 7  
LOOP END

LOOP BEGIN at ../source-v15.1/takemolec.f(171,9)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25436: completely unrolled by 11  
LOOP END

LOOP BEGIN at ../source-v15.1/takemolec.f(171,9)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25436: completely unrolled by 8  
LOOP END

LOOP BEGIN at ../source-v15.1/takemolec.f(175,25)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25436: completely unrolled by 20  
LOOP END

LOOP BEGIN at ../source-v15.1/takemolec.f(184,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between at (187:30) and at (187:30)
LOOP END

LOOP BEGIN at ../source-v15.1/takemolec.f(219,7)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ../source-v15.1/takemolec.f(227,7)
<Predicate Optimized v1>
   remark #25422: Invariant Condition at line 229 hoisted out of this loop
   remark #15527: loop was not vectorized: function call to memcpy cannot be vectorized   [ ../source-v15.1/takemolec.f(230,11) ]
LOOP END

LOOP BEGIN at ../source-v15.1/takemolec.f(227,7)
<Predicate Optimized v2>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

    Report from: Code generation optimizations [cg]

../source-v15.1/takemolec.f(230,11):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (4, 0), and destination (alignment, offset): (4, 0)
../source-v15.1/takemolec.f(1,18):remark #34051: REGISTER ALLOCATION : [takemolec_] ../source-v15.1/takemolec.f:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     337
            Global    :      63
            Local     :     274
        Regenerable   :     108
        Spilled       :      17
        
    Routine stack
        Variables     :     168 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      16 [7.18e+00 ~ 0.0%]
        Spills        :      96 bytes*
            Reads     :      19 [2.04e+01 ~ 0.1%]
            Writes    :      14 [1.14e+01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
