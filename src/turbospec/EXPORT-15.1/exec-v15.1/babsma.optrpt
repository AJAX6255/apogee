Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: BABSMA

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (BABSMA) [1] ../source-v15.1/babsma.f(1,15)
  -> INLINE: (142,17) VACAIR


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../source-v15.1/babsma.f(144,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between at (143:9) and at (143:9)
   remark #25436: completely unrolled by 5  
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(149,7)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/babsma.f(151,7) ]
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(153,7)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/babsma.f(155,7) ]
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(162,10)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/babsma.f(162,10) ]
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(197,7)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/babsma.f(204,7) ]
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(197,7)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(213,13)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../source-v15.1/babsma.f(213,13)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../source-v15.1/babsma.f(233,13) ]
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(260,7)
<Peeled loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(260,7)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/babsma.f(262,7) ]
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(260,7)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(285,7)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/babsma.f(287,7) ]
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(289,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between at (290:35) and at (290:35)
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(384,11)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/babsma.f(386,11) ]
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(384,11)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(397,11)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(404,11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (404:11) and at (404:11)
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(416,13)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/babsma.f(418,13) ]
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(416,13)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(433,11)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(438,11)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(451,11)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(466,13)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/babsma.f(468,13) ]
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(466,13)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(491,11)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(535,11)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(558,11)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(568,11)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/babsma.f(570,11) ]
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(568,11)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(577,11)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(581,11)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(596,11)
   remark #15523: loop was not vectorized: loop control variable KK was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(617,11)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/babsma.f(621,11) ]
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(617,11)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(617,11)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(624,11)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/babsma.f(626,11) ]
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ../source-v15.1/babsma.f(625,13) ]
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(628,11)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/babsma.f(635,11) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between RR(K) (634:13) and RR(K-1) (631:13)
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(636,11)
<Peeled loop for vectorization>
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(636,11)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/babsma.f(638,11) ]
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(636,11)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(636,11)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(642,11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between at (643:13) and at (643:13)
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(654,11)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/babsma.f(656,11) ]
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(654,11)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(661,11)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(672,11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between TAU(K) (673:13) and TAU(K-1) (673:13)
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(676,11)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(685,14)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(501,11)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(504,11)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(694,11)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/babsma.f(696,11) ]
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(694,11)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(721,10)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/babsma.f(721,10) ]
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../source-v15.1/babsma.f(724,12)
   <Peeled loop for vectorization>
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END

   LOOP BEGIN at ../source-v15.1/babsma.f(724,12)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/babsma.f(724,12) ]
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../source-v15.1/babsma.f(724,12)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at ../source-v15.1/babsma.f(724,12)
   <Remainder loop for vectorization>
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(763,10)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../source-v15.1/babsma.f(804,7)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at ../source-v15.1/babsma.f(811,7)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at ../source-v15.1/babsma.f(989,12)
      remark #15523: loop was not vectorized: loop control variable J0 was found, but loop iteration count cannot be computed before executing the loop

      LOOP BEGIN at ../source-v15.1/babsma.f(991,14)
         remark #15523: loop was not vectorized: loop control variable J0 was found, but loop iteration count cannot be computed before executing the loop
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      LOOP END
   LOOP END

   LOOP BEGIN at ../source-v15.1/babsma.f(1003,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between c07%be_field (1003:9) and c07 (1003:9)
   LOOP END

   LOOP BEGIN at ../source-v15.1/babsma.f(1004,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between c13%be_field (1004:9) and c13 (1004:9)
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(1011,9)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../source-v15.1/babsma.f(1017,9)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../source-v15.1/babsma.f(255,7)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification

   LOOP BEGIN at ../source-v15.1/babsma.f(254,9)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

../source-v15.1/babsma.f(279,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 8), and destination (alignment, offset): (32, 0)
../source-v15.1/babsma.f(1,15):remark #34051: REGISTER ALLOCATION : [MAIN__] ../source-v15.1/babsma.f:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   27[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm12]
        
    Routine temporaries
        Total         :    4592
            Global    :     725
            Local     :    3867
        Regenerable   :    3157
        Spilled       :      72
        
    Routine stack
        Variables     :    5532 bytes*
            Reads     :       2 [2.00e+00 ~ 0.0%]
            Writes    :     853 [3.63e+08 ~ 9.9%]
        Spills        :     520 bytes*
            Reads     :     182 [2.31e+07 ~ 0.6%]
            Writes    :     139 [4.95e+04 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: VACAIR

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (VACAIR) [2] ../source-v15.1/babsma.f(1054,23)


    Report from: Code generation optimizations [cg]

../source-v15.1/babsma.f(1054,23):remark #34051: REGISTER ALLOCATION : [vacair_] ../source-v15.1/babsma.f:1054

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rdi zmm0-zmm5]
        
    Routine temporaries
        Total         :      24
            Global    :       0
            Local     :      24
        Regenerable   :       5
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
