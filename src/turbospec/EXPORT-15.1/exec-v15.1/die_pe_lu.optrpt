Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: DIE_PE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DIE_PE) [1] ../source-v15.1/die_pe_lu.f(1,18)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../source-v15.1/die_pe_lu.f(110,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between NELEMI (111:9) and NELEMI (118:9)
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(152,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between at (163:15) and at (164:15)

   LOOP BEGIN at ../source-v15.1/die_pe_lu.f(169,13)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ../source-v15.1/die_pe_lu.f(172,15) ]
   LOOP END

   LOOP BEGIN at ../source-v15.1/die_pe_lu.f(158,13)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between TSUAPM (159:15) and TSUAPM (159:15)
      remark #25436: completely unrolled by 4  
   LOOP END

   LOOP BEGIN at ../source-v15.1/die_pe_lu.f(180,11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between TSUAPM (181:13) and TSUAPM (181:13)
      remark #25436: completely unrolled by 4  
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(227,9)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../source-v15.1/die_pe_lu.f(244,7) ]

   LOOP BEGIN at ../source-v15.1/die_pe_lu.f(227,9)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/die_pe_lu.f(228,11) ]
      remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/die_pe_lu.f(235,11) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between blk(NELEMI) (229:11) and blk(NELEMI) (235:11)
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(256,9)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/die_pe_lu.f(257,11) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between blk(NELEMI) (258:11) and blk(1) (258:11)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(256,9)
<Remainder>
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(278,9)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/die_pe_lu.f(279,11) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between blk(NELEMI) (282:13) and blk(NELEMI) (286:11)
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(297,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between blk(blk(I)) (298:11) and blk(blk(I)) (298:11)
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(297,9)
<Remainder>
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(306,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../source-v15.1/die_pe_lu.f(310,11)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../source-v15.1/die_pe_lu.f(310,11)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(337,9)
   remark #25420: Collapsed with loop at line 338 
   remark #25408: memset generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at ../source-v15.1/die_pe_lu.f(338,11)
      remark #25421: Loop eliminated in Collapsing 

   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(365,9)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../source-v15.1/die_pe_lu.f(365,9)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../source-v15.1/die_pe_lu.f(365,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(368,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../source-v15.1/die_pe_lu.f(379,11)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../source-v15.1/die_pe_lu.f(379,11)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../source-v15.1/die_pe_lu.f(379,11)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(388,9)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../source-v15.1/die_pe_lu.f(388,9)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../source-v15.1/die_pe_lu.f(388,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(438,9)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ../source-v15.1/die_pe_lu.f(439,11) ]
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(438,9)
<Remainder>
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(447,9)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(447,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(451,9)
   remark #15301: OUTER LOOP WAS VECTORIZED

   LOOP BEGIN at ../source-v15.1/die_pe_lu.f(453,11)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ../source-v15.1/die_pe_lu.f(454,13) ]
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(451,9)
<Remainder loop for vectorization>

   LOOP BEGIN at ../source-v15.1/die_pe_lu.f(453,11)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(472,9)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ../source-v15.1/die_pe_lu.f(473,11) ]
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(472,9)
<Remainder>
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(489,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between ERRX (497:13) and ERRX (492:11)
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(507,9)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(507,9)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(507,9)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(512,9)
<Peeled loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(512,9)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(512,9)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(526,9)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ../source-v15.1/die_pe_lu.f(527,11) ]
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(534,9)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/die_pe_lu.f(535,11) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(549,11)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/die_pe_lu.f(550,13) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 4
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(549,11)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(644,7)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/die_pe_lu.f(645,9) ]
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(644,7)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(644,7)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(653,7)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../source-v15.1/die_pe_lu.f(653,7)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../source-v15.1/die_pe_lu.f(653,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(667,7)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ../source-v15.1/die_pe_lu.f(668,9) ]
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at ../source-v15.1/die_pe_lu.f(667,7)
<Remainder>
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../source-v15.1/die_pe_lu.f(609,7)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ ../source-v15.1/die_pe_lu.f(534,9) ]

   LOOP BEGIN at ../source-v15.1/die_pe_lu.f(534,9)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

../source-v15.1/die_pe_lu.f(339,13):remark #34026: call to memset implemented as a call to optimized library version
../source-v15.1/die_pe_lu.f(366,11):remark #34026: call to memcpy implemented as a call to optimized library version
../source-v15.1/die_pe_lu.f(389,11):remark #34026: call to memcpy implemented as a call to optimized library version
../source-v15.1/die_pe_lu.f(654,9):remark #34026: call to memcpy implemented as a call to optimized library version
../source-v15.1/die_pe_lu.f(1,18):remark #34051: REGISTER ALLOCATION : [die_pe_] ../source-v15.1/die_pe_lu.f:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :    1196
            Global    :     315
            Local     :     881
        Regenerable   :     323
        Spilled       :      62
        
    Routine stack
        Variables     :     384 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      51 [2.14e+02 ~ 0.0%]
        Spills        :     520 bytes*
            Reads     :     142 [4.36e+03 ~ 0.5%]
            Writes    :      96 [2.09e+03 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
