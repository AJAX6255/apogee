Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: LUBKSB

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (LUBKSB) [1] ../source-v15.1/lubksb.f(1,18)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../source-v15.1/lubksb.f(8,10)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between B(LL) (10:9) and B(I) (19:9)

   LOOP BEGIN at ../source-v15.1/lubksb.f(13,14)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ../source-v15.1/lubksb.f(14,13) ]
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at ../source-v15.1/lubksb.f(13,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/lubksb.f(21,10)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between B(J) (24:11) and B(I) (26:9)

   LOOP BEGIN at ../source-v15.1/lubksb.f(23,12)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ../source-v15.1/lubksb.f(24,11) ]
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at ../source-v15.1/lubksb.f(23,12)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

../source-v15.1/lubksb.f(1,18):remark #34051: REGISTER ALLOCATION : [lubksb_] ../source-v15.1/lubksb.f:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     110
            Global    :      53
            Local     :      57
        Regenerable   :       3
        Spilled       :      16
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      88 bytes*
            Reads     :      23 [7.44e+01 ~ 9.9%]
            Writes    :      12 [1.57e+01 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
