Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: EQMOL_PE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (EQMOL_PE) [1] ../source-v15.1/eqmol_pe_lu.f(2,18)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(153,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between ELEMXI (159:10) and ELEMXI (195:4)

   LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(162,11)
      remark #15523: loop was not vectorized: loop control variable III was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(201,9)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(201,9)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(217,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between blk(NELEMI) (219:11) and blk(NELEMI) (220:11)
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(224,9)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/eqmol_pe_lu.f(227,11) ]
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ../source-v15.1/eqmol_pe_lu.f(227,11) ]
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(224,9)
<Remainder>
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(238,9)
   remark #15523: loop was not vectorized: loop control variable M was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(241,9)
<Distributed chunk1>
   remark #25426: Loop Distributed (4 way) 
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(241,9)
   <Distributed chunk1>
      remark #15301: PARTIAL LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(241,9)
   <Remainder loop for vectorization, Distributed chunk1>
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(241,9)
<Distributed chunk2>
   remark #15301: PARTIAL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(241,9)
<Remainder loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(241,9)
<Distributed chunk3>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(246,11)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(246,11)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(246,11)
   <Peeled loop for vectorization>
      remark #25436: completely unrolled by 2  
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(241,9)
<Distributed chunk4>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(241,9)
<Remainder, Distributed chunk4>
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(267,2)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(267,2)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(277,2)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(277,2)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(312,9)
<Distributed chunk1>
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/eqmol_pe_lu.f(314,11) ]
   remark #25426: Loop Distributed (2 way) 
   remark #15301: PARTIAL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(312,9)
<Remainder loop for vectorization, Distributed chunk1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(312,9)
<Remainder loop for vectorization, Distributed chunk1>
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(312,9)
<Distributed chunk2>
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ../source-v15.1/eqmol_pe_lu.f(314,11) ]
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(312,9)
<Remainder, Distributed chunk2>
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(339,9)
   remark #15527: loop was not vectorized: function call to memcpy cannot be vectorized   [ ../source-v15.1/eqmol_pe_lu.f(340,11) ]
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(357,7)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/eqmol_pe_lu.f(359,11) ]
   remark #15326: loop was not vectorized: implied FP exception model prevents vectorization. Consider changing compiler flags and/or directives in the source to enable fast FP model and to mask FP exceptions   [ ../source-v15.1/eqmol_pe_lu.f(358,22) ]
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(357,7)
<Remainder>
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(366,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between blk (373:13) and blk (373:13)

   LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(367,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between blk (373:13) and blk (373:13)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(367,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(441,10)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/eqmol_pe_lu.f(442,9) ]
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ../source-v15.1/eqmol_pe_lu.f(442,9) ]
   remark #25439: unrolled with remainder by 4  
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(441,10)
<Remainder>
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(538,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(463,11)
      remark #15326: loop was not vectorized: implied FP exception model prevents vectorization. Consider changing compiler flags and/or directives in the source to enable fast FP model and to mask FP exceptions   [ ../source-v15.1/eqmol_pe_lu.f(464,28) ]
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(463,11)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(523,7)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(533,7)
<Peeled loop for vectorization>
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(533,7)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(533,7)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(599,7)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/eqmol_pe_lu.f(616,9) ]
   remark #15326: loop was not vectorized: implied FP exception model prevents vectorization. Consider changing compiler flags and/or directives in the source to enable fast FP model and to mask FP exceptions   [ ../source-v15.1/eqmol_pe_lu.f(600,19) ]

   LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(609,11)
      remark #15326: loop was not vectorized: implied FP exception model prevents vectorization. Consider changing compiler flags and/or directives in the source to enable fast FP model and to mask FP exceptions   [ ../source-v15.1/eqmol_pe_lu.f(610,27) ]
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(609,11)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(624,7)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/eqmol_pe_lu.f(627,11) ]
   remark #15326: loop was not vectorized: implied FP exception model prevents vectorization. Consider changing compiler flags and/or directives in the source to enable fast FP model and to mask FP exceptions   [ ../source-v15.1/eqmol_pe_lu.f(626,19) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(267,2)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification

   LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(254,11)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/eqmol_pe_lu.f(554,7)
   remark #15534: loop was not vectorized: loop contains arithmetic if or computed goto. Consider using if-then-else statement.    [ ../source-v15.1/eqmol_pe_lu.f(540,14) ]
LOOP END

    Report from: Code generation optimizations [cg]

../source-v15.1/eqmol_pe_lu.f(340,11):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
../source-v15.1/eqmol_pe_lu.f(159,10):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (2, 0), and destination (alignment, offset): (16, 0)
../source-v15.1/eqmol_pe_lu.f(183,11):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (2, 0)
../source-v15.1/eqmol_pe_lu.f(187,11):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (2, 0)
../source-v15.1/eqmol_pe_lu.f(242,11):remark #34026: call to memset implemented as a call to optimized library version
../source-v15.1/eqmol_pe_lu.f(2,18):remark #34051: REGISTER ALLOCATION : [eqmol_pe_] ../source-v15.1/eqmol_pe_lu.f:2

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   27[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm12]
        
    Routine temporaries
        Total         :    1111
            Global    :     238
            Local     :     873
        Regenerable   :     365
        Spilled       :      28
        
    Routine stack
        Variables     :     352 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      47 [1.69e+02 ~ 0.5%]
        Spills        :     184 bytes*
            Reads     :      47 [8.87e+01 ~ 0.3%]
            Writes    :      36 [3.54e+01 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
