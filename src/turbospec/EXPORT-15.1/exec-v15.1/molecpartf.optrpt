Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: MOLECPARTF

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MOLECPARTF) [1] ../source-v15.1/molecpartf.f(1,18)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../source-v15.1/molecpartf.f(41,9)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../source-v15.1/molecpartf.f(41,9)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at ../source-v15.1/molecpartf.f(41,9)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../source-v15.1/molecpartf.f(41,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/molecpartf.f(45,9)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../source-v15.1/molecpartf.f(54,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../source-v15.1/molecpartf.f(55,11)
      remark #15523: loop was not vectorized: loop control variable M was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at ../source-v15.1/molecpartf.f(64,11)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../source-v15.1/molecpartf.f(88,17)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../source-v15.1/molecpartf.f(94,19)
            remark #25401: memcopy(with guard) generated
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../source-v15.1/molecpartf.f(94,19)
            <Multiversioned v2>
               remark #15300: LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at ../source-v15.1/molecpartf.f(94,19)
            <Remainder loop for vectorization, Multiversioned v2>
            LOOP END
         LOOP END

         LOOP BEGIN at ../source-v15.1/molecpartf.f(97,19)
            remark #25436: completely unrolled by 5   (pre-vector) 
         LOOP END

         LOOP BEGIN at ../source-v15.1/molecpartf.f(101,19)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at ../source-v15.1/molecpartf.f(101,19)
         <Remainder>
         LOOP END
      LOOP END

      LOOP BEGIN at ../source-v15.1/molecpartf.f(75,17)
         remark #15300: LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../source-v15.1/molecpartf.f(75,17)
      <Remainder loop for vectorization>
      LOOP END

      LOOP BEGIN at ../source-v15.1/molecpartf.f(79,17)
         remark #25399: memcopy generated
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../source-v15.1/molecpartf.f(79,17)
            remark #15300: LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at ../source-v15.1/molecpartf.f(79,17)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/molecpartf.f(114,9)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../source-v15.1/molecpartf.f(114,9)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../source-v15.1/molecpartf.f(114,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/molecpartf.f(123,11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (119:13) and at (146:13)

   LOOP BEGIN at ../source-v15.1/molecpartf.f(127,11)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ../source-v15.1/molecpartf.f(130,13) ]
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/molecpartf.f(162,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ ../source-v15.1/molecpartf.f(164,9) ]

   LOOP BEGIN at ../source-v15.1/molecpartf.f(164,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between QQ (165:11) and QQ (165:11)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at ../source-v15.1/molecpartf.f(164,9)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

../source-v15.1/molecpartf.f(42,11):remark #34026: call to memset implemented as a call to optimized library version
../source-v15.1/molecpartf.f(72,17):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
../source-v15.1/molecpartf.f(80,19):remark #34026: call to memcpy implemented as a call to optimized library version
../source-v15.1/molecpartf.f(115,11):remark #34026: call to memcpy implemented as a call to optimized library version
../source-v15.1/molecpartf.f(89,19):remark #34026: call to memmove implemented as a call to optimized library version
../source-v15.1/molecpartf.f(90,19):remark #34026: call to memmove implemented as a call to optimized library version
../source-v15.1/molecpartf.f(95,21):remark #34026: call to memcpy implemented as a call to optimized library version
../source-v15.1/molecpartf.f(1,18):remark #34051: REGISTER ALLOCATION : [molecpartf_] ../source-v15.1/molecpartf.f:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     455
            Global    :     131
            Local     :     324
        Regenerable   :     213
        Spilled       :      30
        
    Routine stack
        Variables     :     456 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      62 [6.90e+01 ~ 0.1%]
        Spills        :     192 bytes*
            Reads     :      42 [2.10e+03 ~ 2.6%]
            Writes    :      36 [1.85e+02 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
