Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: BSYNBPLATT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (BSYNBPLATT) [1] ../source-v15.1/bsynbplatt.f(1,18)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../source-v15.1/bsynbplatt.f(66,10)
<Peeled loop for vectorization>
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ../source-v15.1/bsynbplatt.f(66,10)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/bsynbplatt.f(66,10)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at ../source-v15.1/bsynbplatt.f(107,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../source-v15.1/bsynbplatt.f(112,11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between at (113:13) and at (113:13)
   LOOP END

   LOOP BEGIN at ../source-v15.1/bsynbplatt.f(116,10)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../source-v15.1/bsynbplatt.f(116,10)
         remark #15300: LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../source-v15.1/bsynbplatt.f(116,10)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/bsynbplatt.f(201,16)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between XLSINGLE (204:15) and XLSINGLE (205:24)
LOOP END

LOOP BEGIN at ../source-v15.1/bsynbplatt.f(213,16)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/bsynbplatt.f(213,16)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/bsynbplatt.f(213,16)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/bsynbplatt.f(140,16)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between XLSINGLE (145:15) and XLSINGLE (146:24)
LOOP END

LOOP BEGIN at ../source-v15.1/bsynbplatt.f(161,16)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/bsynbplatt.f(161,16)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/bsynbplatt.f(161,16)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/bsynbplatt.f(252,11)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../source-v15.1/bsynbplatt.f(255,26) ]
LOOP END

LOOP BEGIN at ../source-v15.1/bsynbplatt.f(139,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (282:16) and at (291:16)

   LOOP BEGIN at ../source-v15.1/bsynbplatt.f(291,16)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between at (291:16) and at (291:16)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../source-v15.1/bsynbplatt.f(134,12)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ ../source-v15.1/bsynbplatt.f(136,13) ]

   LOOP BEGIN at ../source-v15.1/bsynbplatt.f(136,13)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification

      LOOP BEGIN at ../source-v15.1/bsynbplatt.f(194,16)
         remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

../source-v15.1/bsynbplatt.f(117,9):remark #34026: call to memcpy implemented as a call to optimized library version
../source-v15.1/bsynbplatt.f(1,18):remark #34051: REGISTER ALLOCATION : [bsynbplatt_] ../source-v15.1/bsynbplatt.f:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :     769
            Global    :     141
            Local     :     628
        Regenerable   :     519
        Spilled       :      33
        
    Routine stack
        Variables     :     808 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :     112 [8.11e+08 ~ 5.0%]
        Spills        :     224 bytes*
            Reads     :      54 [5.26e+08 ~ 3.3%]
            Writes    :      50 [7.30e+07 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
