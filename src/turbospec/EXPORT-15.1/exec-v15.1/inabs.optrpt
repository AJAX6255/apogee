Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: INABS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (INABS) [1] ../source-v15.1/inabs.f(2,18)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../source-v15.1/inabs.f(111,7)
   remark #25408: memset generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at ../source-v15.1/inabs.f(124,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../source-v15.1/inabs.f(134,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between IDISKV(J-1) (137:13) and IDISKV(J) (138:13)
      remark #25439: unrolled with remainder by 2  
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
   LOOP END

   LOOP BEGIN at ../source-v15.1/inabs.f(134,9)
   <Remainder>
   LOOP END

   LOOP BEGIN at ../source-v15.1/inabs.f(145,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between LAMBDA (147:13) and LAMBDA (148:13)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at ../source-v15.1/inabs.f(145,9)
   <Remainder>
   LOOP END

   LOOP BEGIN at ../source-v15.1/inabs.f(167,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between at (168:11) and at (168:11)
   LOOP END

   LOOP BEGIN at ../source-v15.1/inabs.f(175,13)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between at (179:17) and at (179:17)

      LOOP BEGIN at ../source-v15.1/inabs.f(175,13)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between at (179:17) and at (179:17)
      LOOP END
   LOOP END

   LOOP BEGIN at ../source-v15.1/inabs.f(199,11)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../source-v15.1/inabs.f(199,11)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../source-v15.1/inabs.f(199,11)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at ../source-v15.1/inabs.f(204,11)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../source-v15.1/inabs.f(204,11)
         remark #15300: LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../source-v15.1/inabs.f(204,11)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at ../source-v15.1/inabs.f(221,13)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between at (230:19) and at (231:19)
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/inabs.f(295,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../source-v15.1/inabs.f(298,9)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END

   LOOP BEGIN at ../source-v15.1/inabs.f(305,9)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ../source-v15.1/inabs.f(313,11)
         remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

         LOOP BEGIN at ../source-v15.1/inabs.f(324,15)
            remark #15326: loop was not vectorized: implied FP exception model prevents vectorization. Consider changing compiler flags and/or directives in the source to enable fast FP model and to mask FP exceptions   [ ../source-v15.1/inabs.f(325,40) ]
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at ../source-v15.1/inabs.f(324,15)
         <Remainder>
         LOOP END

         LOOP BEGIN at ../source-v15.1/inabs.f(380,15)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #25439: unrolled with remainder by 2  
            remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
         LOOP END

         LOOP BEGIN at ../source-v15.1/inabs.f(380,15)
         <Remainder>
            remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
         LOOP END

         LOOP BEGIN at ../source-v15.1/inabs.f(395,15)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #25439: unrolled with remainder by 2  
            remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
         LOOP END

         LOOP BEGIN at ../source-v15.1/inabs.f(395,15)
         <Remainder>
            remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
         LOOP END

         LOOP BEGIN at ../source-v15.1/inabs.f(408,19)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         LOOP END

         LOOP BEGIN at ../source-v15.1/inabs.f(417,19)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed FLOW dependence between at (421:23) and at (421:23)
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/inabs.f(455,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between at (457:9) and at (457:9)
LOOP END

LOOP BEGIN at ../source-v15.1/inabs.f(464,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (466:11) and at (467:11)
LOOP END

    Report from: Code generation optimizations [cg]

../source-v15.1/inabs.f(112,9):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
../source-v15.1/inabs.f(205,13):remark #34026: call to memcpy implemented as a call to optimized library version
../source-v15.1/inabs.f(2,18):remark #34051: REGISTER ALLOCATION : [inabs_] ../source-v15.1/inabs.f:2

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm8]
        
    Routine temporaries
        Total         :    1256
            Global    :     289
            Local     :     967
        Regenerable   :     797
        Spilled       :      54
        
    Routine stack
        Variables     :    1384 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :     219 [1.26e+10 ~ 8.6%]
        Spills        :     376 bytes*
            Reads     :      98 [7.23e+09 ~ 4.9%]
            Writes    :      94 [1.82e+09 ~ 1.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
