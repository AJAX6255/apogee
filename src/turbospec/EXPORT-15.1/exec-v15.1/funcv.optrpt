Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: FUNCV

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FUNCV) [1] ../source-v15.1/funcv.f(1,13)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../source-v15.1/funcv.f(51,7)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/funcv.f(59,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between blk(NELEMI) (57:9) and blk(NELEMI) (58:9)
LOOP END

LOOP BEGIN at ../source-v15.1/funcv.f(67,9)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ../source-v15.1/funcv.f(70,11) ]
LOOP END

LOOP BEGIN at ../source-v15.1/funcv.f(77,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between blk(NELEMJ) (82:13) and blk(NELEMJ) (82:13)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at ../source-v15.1/funcv.f(77,9)
<Remainder>
LOOP END

LOOP BEGIN at ../source-v15.1/funcv.f(102,11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between blk(NELEMJ) (108:15) and blk(NELEMJ) (108:15)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at ../source-v15.1/funcv.f(102,11)
<Remainder>
LOOP END

LOOP BEGIN at ../source-v15.1/funcv.f(120,11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between blk(NELEMJ) (123:33) and blk(NELEMJ) (123:33)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at ../source-v15.1/funcv.f(120,11)
<Remainder>
LOOP END

LOOP BEGIN at ../source-v15.1/funcv.f(140,11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (141:14) and at (141:14)
LOOP END

LOOP BEGIN at ../source-v15.1/funcv.f(170,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:log (175:19) and call:log (176:19)
LOOP END

LOOP BEGIN at ../source-v15.1/funcv.f(191,7)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/funcv.f(192,9) ]
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ../source-v15.1/funcv.f(192,9) ]
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at ../source-v15.1/funcv.f(191,7)
<Remainder>
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../source-v15.1/funcv.f(111,11)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ ../source-v15.1/funcv.f(128,7) ]

   LOOP BEGIN at ../source-v15.1/funcv.f(128,7)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

../source-v15.1/funcv.f(1,13):remark #34051: REGISTER ALLOCATION : [funcv_] ../source-v15.1/funcv.f:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     227
            Global    :      85
            Local     :     142
        Regenerable   :      60
        Spilled       :      21
        
    Routine stack
        Variables     :     136 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      13 [4.61e+01 ~ 0.0%]
        Spills        :     128 bytes*
            Reads     :      42 [8.03e+03 ~ 1.7%]
            Writes    :      31 [7.00e+03 ~ 1.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
