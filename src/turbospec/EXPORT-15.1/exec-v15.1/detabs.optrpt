Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: DETABS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DETABS) [1] ../source-v15.1/detabs.f(2,18)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../source-v15.1/detabs.f(140,12)
   remark #15527: loop was not vectorized: function call to memmove cannot be vectorized   [ ../source-v15.1/detabs.f(141,9) ]
LOOP END

LOOP BEGIN at ../source-v15.1/detabs.f(146,9)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at ../source-v15.1/detabs.f(147,9)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at ../source-v15.1/detabs.f(154,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (155:12) and at (155:12)
LOOP END

LOOP BEGIN at ../source-v15.1/detabs.f(381,10)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/detabs.f(382,9) ]
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ../source-v15.1/detabs.f(382,9) ]
   remark #25436: completely unrolled by 15  
LOOP END

LOOP BEGIN at ../source-v15.1/detabs.f(424,10)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/detabs.f(425,9) ]
   remark #25427: Loop Statements Reordered
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ../source-v15.1/detabs.f(425,9) ]
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at ../source-v15.1/detabs.f(424,10)
<Remainder>
LOOP END

LOOP BEGIN at ../source-v15.1/detabs.f(521,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (521:7) and at (521:7)
LOOP END

LOOP BEGIN at ../source-v15.1/detabs.f(523,9)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/detabs.f(523,9)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/detabs.f(523,9)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/detabs.f(525,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/detabs.f(525,9)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/detabs.f(525,9)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/detabs.f(525,9)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/detabs.f(191,9)
<Peeled loop for vectorization>
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ../source-v15.1/detabs.f(191,9)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/detabs.f(191,9)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/detabs.f(198,9)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../source-v15.1/detabs.f(198,9)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../source-v15.1/detabs.f(198,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/detabs.f(303,7)
   remark #15326: loop was not vectorized: implied FP exception model prevents vectorization. Consider changing compiler flags and/or directives in the source to enable fast FP model and to mask FP exceptions   [ ../source-v15.1/detabs.f(304,26) ]
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ../source-v15.1/detabs.f(306,7)
   remark #15326: loop was not vectorized: implied FP exception model prevents vectorization. Consider changing compiler flags and/or directives in the source to enable fast FP model and to mask FP exceptions   [ ../source-v15.1/detabs.f(307,26) ]
   remark #25436: completely unrolled by 5  
LOOP END

LOOP BEGIN at ../source-v15.1/detabs.f(310,7)
   remark #15326: loop was not vectorized: implied FP exception model prevents vectorization. Consider changing compiler flags and/or directives in the source to enable fast FP model and to mask FP exceptions   [ ../source-v15.1/detabs.f(311,26) ]
   remark #25438: unrolled without remainder by 2  
LOOP END

    Report from: Code generation optimizations [cg]

../source-v15.1/detabs.f(199,7):remark #34026: call to memset implemented as a call to optimized library version
../source-v15.1/detabs.f(137,9):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (32, 0)
../source-v15.1/detabs.f(138,9):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (32, 8)
../source-v15.1/detabs.f(139,9):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 16)
../source-v15.1/detabs.f(141,9):remark #34026: call to memmove implemented as a call to optimized library version
../source-v15.1/detabs.f(144,9):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (8, 0)
../source-v15.1/detabs.f(145,9):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (8, 0)
../source-v15.1/detabs.f(150,9):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (8, 0)
../source-v15.1/detabs.f(151,9):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (8, 0)
../source-v15.1/detabs.f(152,9):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (8, 0)
../source-v15.1/detabs.f(153,9):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (8, 0)
../source-v15.1/detabs.f(2,18):remark #34051: REGISTER ALLOCATION : [detabs_] ../source-v15.1/detabs.f:2

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   29[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :    1105
            Global    :     212
            Local     :     893
        Regenerable   :     413
        Spilled       :      66
        
    Routine stack
        Variables     :     584 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      78 [2.08e+01 ~ 0.6%]
        Spills        :     536 bytes*
            Reads     :     135 [1.57e+02 ~ 4.6%]
            Writes    :      91 [9.58e+01 ~ 2.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
