Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: EQWIDT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (EQWIDT) [1] ../source-v15.1/eqwidt.f(1,15)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../source-v15.1/eqwidt.f(180,7)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/eqwidt.f(182,7) ]
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidt.f(209,7)
   remark #15527: loop was not vectorized: function call to memcpy cannot be vectorized   [ ../source-v15.1/eqwidt.f(210,9) ]
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidt.f(258,7)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidt.f(264,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (264:7) and at (264:7)
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidt.f(270,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between at (271:35) and at (271:35)
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidt.f(361,7)
   remark #15326: loop was not vectorized: implied FP exception model prevents vectorization. Consider changing compiler flags and/or directives in the source to enable fast FP model and to mask FP exceptions   [ ../source-v15.1/eqwidt.f(362,21) ]
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidt.f(370,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between at (372:11) and at (382:11)
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidt.f(392,7)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidt.f(392,7)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidt.f(444,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../source-v15.1/eqwidt.f(445,11)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/eqwidt.f(445,11) ]
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../source-v15.1/eqwidt.f(445,11)
   <Peeled loop for vectorization>
      remark #25436: completely unrolled by 3  
   LOOP END

   LOOP BEGIN at ../source-v15.1/eqwidt.f(445,11)
   <Remainder loop for vectorization>
      remark #25436: completely unrolled by 1  
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidt.f(484,7)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../source-v15.1/eqwidt.f(484,7)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../source-v15.1/eqwidt.f(484,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidt.f(490,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../source-v15.1/eqwidt.f(491,9)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/eqwidt.f(494,9) ]
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../source-v15.1/eqwidt.f(491,9)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at ../source-v15.1/eqwidt.f(491,9)
   <Peeled loop for vectorization>
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidt.f(509,10)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/eqwidt.f(509,10) ]
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidt.f(509,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidt.f(525,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidt.f(583,11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (586:15) and at (586:15)
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidt.f(589,11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (592:15) and at (592:15)
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidt.f(595,11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (598:15) and at (598:15)
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidt.f(601,11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (604:15) and at (604:15)
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidt.f(664,9)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ../source-v15.1/eqwidt.f(667,11) ]
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidt.f(664,9)
<Remainder>
LOOP END

LOOP BEGIN at ../source-v15.1/eqwidt.f(705,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../source-v15.1/eqwidt.f(819,11)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/eqwidt.f(822,11) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 3
   LOOP END

   LOOP BEGIN at ../source-v15.1/eqwidt.f(819,11)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at ../source-v15.1/eqwidt.f(825,11)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at ../source-v15.1/eqwidt.f(857,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between at (871:15) and at (873:15)

      LOOP BEGIN at ../source-v15.1/eqwidt.f(867,11)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between blk(K) (868:13) and blk(K) (870:24)
      LOOP END
   LOOP END

   LOOP BEGIN at ../source-v15.1/eqwidt.f(1008,10)
   <Distributed chunk1>
      remark #25426: Loop Distributed (2 way) 
      remark #15301: PARTIAL LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../source-v15.1/eqwidt.f(1008,10)
   <Remainder loop for vectorization, Distributed chunk1>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../source-v15.1/eqwidt.f(1008,10)
   <Remainder loop for vectorization, Distributed chunk1>
   LOOP END

   LOOP BEGIN at ../source-v15.1/eqwidt.f(1008,10)
   <Distributed chunk2>
      remark #15301: PARTIAL LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../source-v15.1/eqwidt.f(1008,10)
   <Remainder loop for vectorization, Distributed chunk2>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END

   LOOP BEGIN at ../source-v15.1/eqwidt.f(1018,7)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../source-v15.1/eqwidt.f(1018,7)
         remark #15300: LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../source-v15.1/eqwidt.f(1018,7)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at ../source-v15.1/eqwidt.f(1274,9)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ../source-v15.1/eqwidt.f(1035,7)
         remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

         LOOP BEGIN at ../source-v15.1/eqwidt.f(1043,9)
            remark #15523: loop was not vectorized: loop control variable ILOOP was found, but loop iteration count cannot be computed before executing the loop

            LOOP BEGIN at ../source-v15.1/eqwidt.f(1050,9)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed FLOW dependence between V (1051:11) and V (1053:18)
            LOOP END
         LOOP END

         LOOP BEGIN at ../source-v15.1/eqwidt.f(1074,7)
            remark #15523: loop was not vectorized: loop control variable ILOOP was found, but loop iteration count cannot be computed before executing the loop

            LOOP BEGIN at ../source-v15.1/eqwidt.f(1084,9)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed FLOW dependence between V (1085:11) and V (1087:18)
            LOOP END
         LOOP END

         LOOP BEGIN at ../source-v15.1/eqwidt.f(1122,7)
            remark #15523: loop was not vectorized: loop control variable I was found, but loop iteration count cannot be computed before executing the loop
            remark #25478: While Loop Unrolled by 2  
         LOOP END

         LOOP BEGIN at ../source-v15.1/eqwidt.f(1128,7)
            remark #15523: loop was not vectorized: loop control variable I was found, but loop iteration count cannot be computed before executing the loop
         LOOP END

         LOOP BEGIN at ../source-v15.1/eqwidt.f(1155,9)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed FLOW dependence between XX(JC) (1154:9) and XX(JC) (1164:9)

            LOOP BEGIN at ../source-v15.1/eqwidt.f(1155,9)
               remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
            LOOP END
         LOOP END

         LOOP BEGIN at ../source-v15.1/eqwidt.f(1181,7)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed FLOW dependence between YYY(II) (1184:11) and YYY(1) (1189:16)

            LOOP BEGIN at ../source-v15.1/eqwidt.f(1183,9)
               remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
               remark #25439: unrolled with remainder by 2  
            LOOP END

            LOOP BEGIN at ../source-v15.1/eqwidt.f(1183,9)
            <Remainder>
            LOOP END

            LOOP BEGIN at ../source-v15.1/eqwidt.f(1188,9)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../source-v15.1/eqwidt.f(1274,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between call:log10f (1276:24) and call:for_write_seq_fmt_xmit (1274:9)
      remark #25436: completely unrolled by 3  
   LOOP END

   LOOP BEGIN at ../source-v15.1/eqwidt.f(1278,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between call:log10f (1280:24) and call:for_write_seq_fmt_xmit (1278:9)
      remark #25436: completely unrolled by 3  
   LOOP END

   LOOP BEGIN at ../source-v15.1/eqwidt.f(1285,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between call:log10f (1287:24) and call:for_write_seq_fmt_xmit (1285:9)
      remark #25436: completely unrolled by 3  
   LOOP END

   LOOP BEGIN at ../source-v15.1/eqwidt.f(1289,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between call:log10f (1291:24) and call:for_write_seq_fmt_xmit (1289:9)
      remark #25436: completely unrolled by 3  
   LOOP END

   LOOP BEGIN at ../source-v15.1/eqwidt.f(1296,9)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #25436: completely unrolled by 3  
   LOOP END

   LOOP BEGIN at ../source-v15.1/eqwidt.f(1308,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between call:log10f (1310:24) and call:for_write_seq_fmt_xmit (1308:9)
      remark #25436: completely unrolled by 3  
   LOOP END

   LOOP BEGIN at ../source-v15.1/eqwidt.f(1312,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between call:log10f (1314:24) and call:for_write_seq_fmt_xmit (1312:9)
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../source-v15.1/eqwidt.f(564,10)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ ../source-v15.1/eqwidt.f(727,9) ]

   LOOP BEGIN at ../source-v15.1/eqwidt.f(727,9)
      remark #15533: loop was not vectorized: loop exceeds complexity limits. Consider overriding limits (-override-limits) or using simd directive.
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

../source-v15.1/eqwidt.f(206,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 8), and destination (alignment, offset): (32, 0)
../source-v15.1/eqwidt.f(207,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 8), and destination (alignment, offset): (32, 0)
../source-v15.1/eqwidt.f(210,9):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
../source-v15.1/eqwidt.f(218,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
../source-v15.1/eqwidt.f(219,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
../source-v15.1/eqwidt.f(220,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
../source-v15.1/eqwidt.f(221,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
../source-v15.1/eqwidt.f(222,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
../source-v15.1/eqwidt.f(223,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
../source-v15.1/eqwidt.f(224,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
../source-v15.1/eqwidt.f(227,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 20), and destination (alignment, offset): (32, 8)
../source-v15.1/eqwidt.f(485,9):remark #34026: call to memcpy implemented as a call to optimized library version
../source-v15.1/eqwidt.f(566,9):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
../source-v15.1/eqwidt.f(1020,9):remark #34026: call to memcpy implemented as a call to optimized library version
../source-v15.1/eqwidt.f(1,15):remark #34051: REGISTER ALLOCATION : [MAIN__] ../source-v15.1/eqwidt.f:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :    3231
            Global    :     520
            Local     :    2711
        Regenerable   :    2112
        Spilled       :     124
        
    Routine stack
        Variables     :    3260 bytes*
            Reads     :       2 [2.00e+00 ~ 0.0%]
            Writes    :     508 [2.10e+09 ~ 0.3%]
        Spills        :     952 bytes*
            Reads     :     232 [6.40e+10 ~ 7.8%]
            Writes    :     183 [4.79e+08 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
