Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: PARTF

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (PARTF) [1] ../source-v15.1/partf.f(1,18)
  -> INLINE: (114,18) PARTITU2
  -> INLINE: (119,18) PARTITU3
  -> INLINE: (124,18) PARTITTH2
  -> INLINE: (129,18) PARTITTH3


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../source-v15.1/partf.f(40,9)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../source-v15.1/partf.f(40,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../source-v15.1/partf.f(56,13)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/partf.f(68,9)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../source-v15.1/partf.f(68,9)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../source-v15.1/partf.f(68,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/partf.f(72,12)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (77:15) and at (88:13)
LOOP END

LOOP BEGIN at ../source-v15.1/partf.f(149,2) inlined into ../source-v15.1/partf.f(114,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (150:12) and at (161:12)

   LOOP BEGIN at ../source-v15.1/partf.f(156,12) inlined into ../source-v15.1/partf.f(114,18)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../source-v15.1/partf.f(158,14) ]
   LOOP END

   LOOP BEGIN at ../source-v15.1/partf.f(166,2) inlined into ../source-v15.1/partf.f(114,18)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ../source-v15.1/partf.f(167,3) ]
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/partf.f(184,2) inlined into ../source-v15.1/partf.f(119,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (185:12) and at (196:19)

   LOOP BEGIN at ../source-v15.1/partf.f(191,12) inlined into ../source-v15.1/partf.f(119,18)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../source-v15.1/partf.f(193,14) ]
   LOOP END

   LOOP BEGIN at ../source-v15.1/partf.f(201,2) inlined into ../source-v15.1/partf.f(119,18)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ../source-v15.1/partf.f(202,3) ]
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/partf.f(125,11)
<Peeled>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ../source-v15.1/partf.f(128,11)
<Peeled>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

    Report from: Code generation optimizations [cg]

../source-v15.1/partf.f(69,11):remark #34026: call to memset implemented as a call to optimized library version
../source-v15.1/partf.f(1,18):remark #34051: REGISTER ALLOCATION : [partf_] ../source-v15.1/partf.f:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     631
            Global    :     218
            Local     :     413
        Regenerable   :     267
        Spilled       :      49
        
    Routine stack
        Variables     :     520 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      57 [8.22e+00 ~ 2.3%]
        Spills        :     352 bytes*
            Reads     :      94 [3.28e+01 ~ 9.2%]
            Writes    :      66 [1.64e+01 ~ 4.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: PARTITTH3

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (PARTITTH3) [2] ../source-v15.1/partf.f(233,11)


    Report from: Code generation optimizations [cg]

../source-v15.1/partf.f(233,11):remark #34051: REGISTER ALLOCATION : [partitth3_] ../source-v15.1/partf.f:233

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rdi zmm0-zmm11]
        
    Routine temporaries
        Total         :     107
            Global    :      30
            Local     :      77
        Regenerable   :      23
        Spilled       :      12
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      96 bytes*
            Reads     :      22 [2.20e+01 ~ 22.4%]
            Writes    :      12 [1.20e+01 ~ 12.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: PARTITTH2

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (PARTITTH2) [3] ../source-v15.1/partf.f(210,11)


    Report from: Code generation optimizations [cg]

../source-v15.1/partf.f(210,11):remark #34051: REGISTER ALLOCATION : [partitth2_] ../source-v15.1/partf.f:210

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rdi zmm0-zmm15]
        
    Routine temporaries
        Total         :     162
            Global    :      44
            Local     :     118
        Regenerable   :      36
        Spilled       :      19
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     152 bytes*
            Reads     :      36 [3.60e+01 ~ 24.5%]
            Writes    :      19 [1.90e+01 ~ 12.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: PARTITU3

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (PARTITU3) [4] ../source-v15.1/partf.f(174,11)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../source-v15.1/partf.f(191,12)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../source-v15.1/partf.f(193,14) ]
LOOP END

LOOP BEGIN at ../source-v15.1/partf.f(201,2)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ../source-v15.1/partf.f(202,3) ]
LOOP END

    Report from: Code generation optimizations [cg]

../source-v15.1/partf.f(174,11):remark #34051: REGISTER ALLOCATION : [partitu3_] ../source-v15.1/partf.f:174

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rsi rdi r8-r9 r12-r13 zmm0-zmm2]
        
    Routine temporaries
        Total         :      69
            Global    :      23
            Local     :      46
        Regenerable   :      42
        Spilled       :       4
        
    Routine stack
        Variables     :     128 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      12 [1.31e+00 ~ 0.1%]
        Spills        :      16 bytes*
            Reads     :       2 [1.96e+02 ~ 16.2%]
            Writes    :       3 [9.99e+01 ~ 8.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: PARTITU2

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (PARTITU2) [5] ../source-v15.1/partf.f(140,11)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../source-v15.1/partf.f(156,12)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../source-v15.1/partf.f(158,14) ]
LOOP END

LOOP BEGIN at ../source-v15.1/partf.f(166,2)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ../source-v15.1/partf.f(167,3) ]
LOOP END

    Report from: Code generation optimizations [cg]

../source-v15.1/partf.f(140,11):remark #34051: REGISTER ALLOCATION : [partitu2_] ../source-v15.1/partf.f:140

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rsi rdi r8-r9 r12-r13 zmm0-zmm2]
        
    Routine temporaries
        Total         :      69
            Global    :      23
            Local     :      46
        Regenerable   :      42
        Spilled       :       4
        
    Routine stack
        Variables     :     128 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      12 [1.31e+00 ~ 0.1%]
        Spills        :      16 bytes*
            Reads     :       2 [1.96e+02 ~ 16.2%]
            Writes    :       3 [9.99e+01 ~ 8.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
