Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: TRANEQPLATT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (TRANEQPLATT) [1] ../source-v15.1/traneqplatt.f(1,18)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../source-v15.1/traneqplatt.f(58,10)
   remark #15300: LOOP WAS VECTORIZED
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at ../source-v15.1/traneqplatt.f(58,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/traneqplatt.f(72,10)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/traneqplatt.f(72,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ../source-v15.1/traneqplatt.f(85,12)
<Predicate Optimized v1>
   remark #25422: Invariant Condition at line 95 hoisted out of this loop
   remark #15326: loop was not vectorized: implied FP exception model prevents vectorization. Consider changing compiler flags and/or directives in the source to enable fast FP model and to mask FP exceptions   [ ../source-v15.1/traneqplatt.f(92,20) ]
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 3
LOOP END

LOOP BEGIN at ../source-v15.1/traneqplatt.f(85,12)
<Predicate Optimized v2>
   remark #15326: loop was not vectorized: implied FP exception model prevents vectorization. Consider changing compiler flags and/or directives in the source to enable fast FP model and to mask FP exceptions   [ ../source-v15.1/traneqplatt.f(92,20) ]
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 3
LOOP END

LOOP BEGIN at ../source-v15.1/traneqplatt.f(105,12)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ../source-v15.1/traneqplatt.f(106,11) ]
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at ../source-v15.1/traneqplatt.f(105,12)
<Remainder>
LOOP END

LOOP BEGIN at ../source-v15.1/traneqplatt.f(126,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (128:11) and at (128:11)
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../source-v15.1/traneqplatt.f(78,10)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

../source-v15.1/traneqplatt.f(1,18):remark #34051: REGISTER ALLOCATION : [traneqplatt_] ../source-v15.1/traneqplatt.f:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r11 r14-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     256
            Global    :      66
            Local     :     190
        Regenerable   :     139
        Spilled       :      10
        
    Routine stack
        Variables     :     264 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      30 [3.31e+02 ~ 1.1%]
        Spills        :      56 bytes*
            Reads     :       9 [1.82e+02 ~ 0.6%]
            Writes    :       8 [1.46e+02 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
