Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: GETINFOSPECIES

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (GETINFOSPECIES) [1] ../source-v15.1/getinfospecies.f(2,18)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../source-v15.1/getinfospecies.f(26,7)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25436: completely unrolled by 5  
LOOP END

LOOP BEGIN at ../source-v15.1/getinfospecies.f(32,7)
   remark #15523: loop was not vectorized: loop control variable SHIFT was found, but loop iteration count cannot be computed before executing the loop
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at ../source-v15.1/getinfospecies.f(37,7)
   remark #15523: loop was not vectorized: loop control variable SHIFT was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at ../source-v15.1/getinfospecies.f(63,7)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/getinfospecies.f(64,9) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

    Report from: Code generation optimizations [cg]

../source-v15.1/getinfospecies.f(33,9):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)
../source-v15.1/getinfospecies.f(38,9):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)
../source-v15.1/getinfospecies.f(48,9):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)
../source-v15.1/getinfospecies.f(2,18):remark #34051: REGISTER ALLOCATION : [getinfospecies_] ../source-v15.1/getinfospecies.f:2

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     159
            Global    :      33
            Local     :     126
        Regenerable   :      94
        Spilled       :       8
        
    Routine stack
        Variables     :     304 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      36 [5.73e+01 ~ 15.2%]
        Spills        :      24 bytes*
            Reads     :       6 [8.24e+00 ~ 2.2%]
            Writes    :       4 [3.78e+00 ~ 1.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
