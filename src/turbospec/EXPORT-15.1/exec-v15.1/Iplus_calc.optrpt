Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: IPLUS_CALC

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (IPLUS_CALC) [1] ../source-v15.1/Iplus_calc.f(1,18)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../source-v15.1/Iplus_calc.f(21,7)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at ../source-v15.1/Iplus_calc.f(39,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between IPLUS(I) (40:9) and IPLUS(I+1) (40:9)
   remark #25439: unrolled with remainder by 4  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 12
LOOP END

LOOP BEGIN at ../source-v15.1/Iplus_calc.f(39,7)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

../source-v15.1/Iplus_calc.f(1,18):remark #34051: REGISTER ALLOCATION : [iplus_calc_] ../source-v15.1/Iplus_calc.f:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   26[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15 zmm0-zmm12]
        
    Routine temporaries
        Total         :     104
            Global    :      35
            Local     :      69
        Regenerable   :      12
        Spilled       :       9
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       4 [4.50e+03 ~ 11.1%]
            Writes    :       4 [4.50e+03 ~ 11.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
