Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: PEMAKE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (PEMAKE) [1] ../source-v15.1/pemake.f(2,18)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../source-v15.1/pemake.f(18,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../source-v15.1/pemake.f(25,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../source-v15.1/pemake.f(58,10)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

../source-v15.1/pemake.f(2,18):remark #34051: REGISTER ALLOCATION : [pemake_] ../source-v15.1/pemake.f:2

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     241
            Global    :      52
            Local     :     189
        Regenerable   :     150
        Spilled       :      20
        
    Routine stack
        Variables     :     208 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      23 [2.00e+01 ~ 5.8%]
        Spills        :     120 bytes*
            Reads     :      33 [1.68e+01 ~ 4.9%]
            Writes    :      24 [1.40e+01 ~ 4.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
