Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: TRANFRPLATT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (TRANFRPLATT) [1] ../source-v15.1/tranfrplatt.f(1,18)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../source-v15.1/tranfrplatt.f(106,10)
   remark #15300: LOOP WAS VECTORIZED
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at ../source-v15.1/tranfrplatt.f(106,10)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at ../source-v15.1/tranfrplatt.f(106,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/tranfrplatt.f(116,10)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/tranfrplatt.f(151,9) ]
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../source-v15.1/tranfrplatt.f(153,9) ]
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../source-v15.1/tranfrplatt.f(126,12)
      remark #15300: LOOP WAS VECTORIZED
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
   LOOP END

   LOOP BEGIN at ../source-v15.1/tranfrplatt.f(126,12)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at ../source-v15.1/tranfrplatt.f(135,12)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between blk(K+1) (136:11) and blk(K) (136:11)
      remark #25439: unrolled with remainder by 2  
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
   LOOP END

   LOOP BEGIN at ../source-v15.1/tranfrplatt.f(135,12)
   <Remainder>
   LOOP END

   LOOP BEGIN at ../source-v15.1/tranfrplatt.f(141,12)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between blk(blk-K) (142:11) and blk(blk-K+1) (142:11)
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 3
   LOOP END

   LOOP BEGIN at ../source-v15.1/tranfrplatt.f(126,12)
   <Peeled loop for vectorization>
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/tranfrplatt.f(164,10)
   remark #15300: LOOP WAS VECTORIZED
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 4
LOOP END

LOOP BEGIN at ../source-v15.1/tranfrplatt.f(164,10)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at ../source-v15.1/tranfrplatt.f(164,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/tranfrplatt.f(170,10)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/tranfrplatt.f(170,10)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../source-v15.1/tranfrplatt.f(170,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../source-v15.1/tranfrplatt.f(35,10)
<Distributed chunk1>
   remark #25426: Loop Distributed (3 way) 
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../source-v15.1/tranfrplatt.f(70,10)
      remark #25427: Loop Statements Reordered
      remark #15300: LOOP WAS VECTORIZED
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
   LOOP END

   LOOP BEGIN at ../source-v15.1/tranfrplatt.f(70,10)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at ../source-v15.1/tranfrplatt.f(70,10)
   <Peeled loop for vectorization>
      remark #25436: completely unrolled by 2  
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/tranfrplatt.f(35,10)
<Distributed chunk2>
   remark #15326: loop was not vectorized: implied FP exception model prevents vectorization. Consider changing compiler flags and/or directives in the source to enable fast FP model and to mask FP exceptions   [ ../source-v15.1/tranfrplatt.f(61,14) ]
LOOP END

LOOP BEGIN at ../source-v15.1/tranfrplatt.f(35,10)
<Distributed chunk3>
   remark #25045: Fused Loops: ( 35 91 )

   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 

   LOOP BEGIN at ../source-v15.1/tranfrplatt.f(92,12)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between blk(K+1,I) (94:11) and blk(K,I) (94:11)
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 10
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/tranfrplatt.f(91,10)
LOOP END

    Report from: Code generation optimizations [cg]

../source-v15.1/tranfrplatt.f(72,19):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 4 }, step { 4 }, types { F32-V128, F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x000000007 }.
../source-v15.1/tranfrplatt.f(72,24):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 4 }, step { 4 }, types { F32-V128, F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x000000007 }.
../source-v15.1/tranfrplatt.f(72,45):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 4 }, step { 4 }, types { F32-V128, F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x000000007 }.
../source-v15.1/tranfrplatt.f(127,34):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 4 }, step { 4 }, types { F32-V128, F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x000000007 }.
../source-v15.1/tranfrplatt.f(127,44):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 4 }, step { 4 }, types { F32-V128, F32-V128, F32-V128 }, number of elements { 4 }, select mask { 0x000000007 }.
../source-v15.1/tranfrplatt.f(1,18):remark #34051: REGISTER ALLOCATION : [tranfrplatt_] ../source-v15.1/tranfrplatt.f:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     571
            Global    :     119
            Local     :     452
        Regenerable   :      25
        Spilled       :      13
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      64 bytes*
            Reads     :       8 [4.80e+02 ~ 0.1%]
            Writes    :       8 [2.70e+02 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
