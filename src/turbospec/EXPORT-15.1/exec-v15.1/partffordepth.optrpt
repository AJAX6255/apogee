Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: PARTFFORDEPTH

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (PARTFFORDEPTH) [1] ../source-v15.1/partffordepth.f(1,18)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../source-v15.1/partffordepth.f(33,11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between DTEMP (34:13) and DTEMP (35:18)
LOOP END

LOOP BEGIN at ../source-v15.1/partffordepth.f(45,11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between DTEMP (46:13) and DTEMP (47:18)
LOOP END

LOOP BEGIN at ../source-v15.1/partffordepth.f(65,7)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../source-v15.1/partffordepth.f(66,20) ]
LOOP END

LOOP BEGIN at ../source-v15.1/partffordepth.f(73,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

    Report from: Code generation optimizations [cg]

../source-v15.1/partffordepth.f(1,18):remark #34051: REGISTER ALLOCATION : [partffordepth_] ../source-v15.1/partffordepth.f:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rsi rdi r8 r12-r15 zmm0]
        
    Routine temporaries
        Total         :     130
            Global    :      30
            Local     :     100
        Regenerable   :      82
        Spilled       :       8
        
    Routine stack
        Variables     :     128 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      12 [1.20e+00 ~ 0.8%]
        Spills        :      32 bytes*
            Reads     :       8 [4.68e+00 ~ 3.2%]
            Writes    :       5 [2.45e+00 ~ 1.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
