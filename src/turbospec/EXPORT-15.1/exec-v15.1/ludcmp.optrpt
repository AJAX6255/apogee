Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: LUDCMP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (LUDCMP) [1] ../source-v15.1/ludcmp.f(1,18)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../source-v15.1/ludcmp.f(11,10)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../source-v15.1/ludcmp.f(23,9) ]

   LOOP BEGIN at ../source-v15.1/ludcmp.f(13,12)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ../source-v15.1/ludcmp.f(14,26) ]
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at ../source-v15.1/ludcmp.f(13,12)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ../source-v15.1/ludcmp.f(25,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../source-v15.1/ludcmp.f(26,12)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between A(K,J) (29:13) and A(I,J) (31:11)

      LOOP BEGIN at ../source-v15.1/ludcmp.f(28,14)
         remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ../source-v15.1/ludcmp.f(29,13) ]
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at ../source-v15.1/ludcmp.f(28,14)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at ../source-v15.1/ludcmp.f(34,12)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between AAMAX (41:18) and AAMAX (43:13)

      LOOP BEGIN at ../source-v15.1/ludcmp.f(36,14)
         remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ../source-v15.1/ludcmp.f(37,13) ]
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at ../source-v15.1/ludcmp.f(36,14)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at ../source-v15.1/ludcmp.f(47,14)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../source-v15.1/ludcmp.f(47,14)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at ../source-v15.1/ludcmp.f(59,14)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at ../source-v15.1/ludcmp.f(59,14)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../source-v15.1/ludcmp.f(59,14)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

../source-v15.1/ludcmp.f(1,18):remark #34051: REGISTER ALLOCATION : [ludcmp_] ../source-v15.1/ludcmp.f:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm8]
        
    Routine temporaries
        Total         :     240
            Global    :      98
            Local     :     142
        Regenerable   :      36
        Spilled       :      39
        
    Routine stack
        Variables     :     144 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      12 [1.17e+01 ~ 0.0%]
        Spills        :     264 bytes*
            Reads     :      66 [4.39e+04 ~ 10.1%]
            Writes    :      46 [1.26e+04 ~ 2.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
